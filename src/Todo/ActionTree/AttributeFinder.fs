// AttributeFinder.fs
//
// Contains functionality mainly for searching for the types with certain attributes using reflection. Additionally
// provides functions for conveniently extracting data from those types. 
// Contained functionality inaccessible outside of assembly. 

namespace Todo.ActionTree

open System
open System.Reflection
open Microsoft.FSharp.Core

open Todo.Attributes.ActionTree

// Module containing functions that find types with specific attributes related to action tree building. Additionally
// provides functions that extract data from these attributes.
module internal AttributeFinder =
    
    // Checks if the type has the correct 'CompilationMappingAttribute' configuration that is generated by the compiler.
    // Effectively asserts that the type is a module, not a class, attribute, function, etc.
    let private hasCompilationMappingAttribute (sourceConstructFlag: SourceConstructFlags) (_type: Type) : bool =
        if _type.GetCustomAttributes(typeof<CompilationMappingAttribute>, false).Length > 0 then
           let foundAttribute = _type.GetCustomAttribute(typeof<CompilationMappingAttribute>) :?> CompilationMappingAttribute
           foundAttribute.SourceConstructFlags = sourceConstructFlag 
        else
            false
            
    let internal getActionFunctionName (methodInfo: MethodInfo) =
        (methodInfo.GetCustomAttribute(typeof<ActionFunctionAttribute>, false) :?> ActionFunctionAttribute).Name
        
    let internal getActionModuleName (_type: Type) =
        (_type.GetCustomAttribute(typeof<ActionModuleAttribute>, false) :?> ActionModuleAttribute).ModuleName
                
    /// <summary>
    /// Gets all modules with the attribute "ActionModule".
    /// </summary>
    /// <remarks>
    /// Any other source construct other than a module (UnionTypes, RecordTypes, etc.) will be ignored.
    /// </remarks>
    let getActionModuleTypes () : Type array =
        Assembly.GetEntryAssembly().GetTypes()
        |> Array.filter (fun _type -> _type.IsClass)
        |> Array.filter (fun _type -> _type.GetCustomAttributes(typeof<ActionModuleAttribute>, false).Length > 0)
        |> Array.filter (hasCompilationMappingAttribute SourceConstructFlags.Module)
        
    /// <summary>
    /// Gets all modules with the attribute "DefaultActionModule".
    /// </summary>
    /// <remarks>
    /// Any other source construct other than a module (UnionTypes, RecordTypes, etc.) will be ignored.
    /// </remarks>
    let getDefaultActionModuleTypes () : Type array =
        Assembly.GetEntryAssembly().GetTypes()
        |> Array.filter (fun _type -> _type.IsClass)
        |> Array.filter (fun _type -> _type.GetCustomAttributes(typeof<DefaultActionModuleAttribute>, false).Length > 0)
        |> Array.filter (hasCompilationMappingAttribute SourceConstructFlags.Module)
        
    /// <summary>
    /// Gets all functions inside a module that have the "ActionFunction" attribute.
    /// </summary>
    let getActionFunctions (_type: Type) =
        _type.GetMethods()
        |> Array.filter (fun methodInfo -> methodInfo.GetCustomAttributes(typeof<ActionFunctionAttribute>, false).Length > 0)
        
    /// <summary>
    /// Gets all functions inside a module that have the "DefaultActionFunction" AND "ActionFunction" attribute.
    /// </summary>
    let getDefaultActionFunctions (_type: Type) =
        _type.GetMethods()
        |> Array.filter (fun methodInfo -> methodInfo.GetCustomAttributes(typeof<DefaultActionFunctionAttribute>, false).Length > 0)
        |> Array.filter (fun methodInfo -> methodInfo.GetCustomAttributes(typeof<ActionFunctionAttribute>, false).Length > 0)